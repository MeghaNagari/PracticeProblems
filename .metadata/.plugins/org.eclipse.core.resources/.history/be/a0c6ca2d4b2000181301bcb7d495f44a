package datastructures;

public class BTree {

	Node root;

	public void addNode(int key, String name) {
		Node newNode = new Node(key, name);

		if (root == null)

			root = newNode;
		else {

			Node currentNode = root;
			Node parent;

			while (true) {

				parent = currentNode;

				if (key < currentNode.key) {
					currentNode = currentNode.leftChild;
					if (currentNode == null) {
						parent.leftChild = newNode;
						return;
					}
				} else

				{
					currentNode = currentNode.rightChild;

					if (currentNode == null) {
						parent.rightChild = newNode;
						return;
					}
				}

			}

		}

	}

	public void preOrder(Node node) {
		if (node != null) {
			System.out.println(node.key + " " + node.name);
			preOrder(node.leftChild);
			preOrder(node.rightChild);

		}

	}

	public void deleteNode(int key) {

		Node currentNode = root;
		
         
		while (true)

		{
			
			if(key<currentNode.key)
			{
			currentNode = currentNode.leftChild;
			if (currentNode.key == key) {
				currentNode = null;
				return;
			}
			}
			else
			{		currentNode=currentNode.rightChild;
			if(currentNode.key==key)
			{
				currentNode=null;
				return;
			}
			}
		}

	}

	public static void main(String[] args) {

		BTree bt = new BTree();
		bt.addNode(50, "Bodd");
		bt.addNode(25, "Vice Pres");
		bt.addNode(15, "Office Manager");
		bt.addNode(30, "Secretary");
		bt.addNode(75, "Sales Manager");
		bt.addNode(85, "Salesman");
		bt.preOrder(bt.root);
		
		
		bt.deleteNode(15);
		
		System.out.println();
		
		
		bt.preOrder(bt.root);
		
		

	}

}
